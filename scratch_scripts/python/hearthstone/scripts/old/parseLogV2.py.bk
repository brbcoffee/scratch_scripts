#!/usr/bin/python

import sys
import re

# read in log
print sys.argv[1]
with open(sys.argv[1]) as f:
    log = f.readlines()

#determine heros and order
def identifyPlayersAndOrder(local_file):
    global opponent_hero
    global my_hero
    global opponent_first
    print "ID players and order called"
    identifiedOpponent = 0
    identifiedMe = 0
    opponent_first = 0
    heroes_list = ['Anduin','Garrosh','Thrall','Valeera','Uther','Malfurion','Gul','Rexxar','Jaina']
    for line in local_file:
        for hero in heroes_list:
            if hero in line:
                if "OPPOSING PLAY (Hero)" in line:
                    opponent_hero = hero
                    identifiedOpponent = 1
                    if "player=1" in line:
                        opponent_first = 1
                if "FRIENDLY PLAY (Hero)" in line:
                     my_hero = hero
                     identifiedMe = 1
#    return (opponent_hero, opponent_first, my_hero)
    return

identifyPlayersAndOrder(log)

print "My opponent is: %s" % opponent_hero
print "My hero is: %s" % my_hero
if opponent_first == 0:
    print "I went first."
else:
    print "My opponent went first."

#determine what number turn it is and determine friendly and opposing play (on that turn)

def playAnalysis(log):
    global turn_number
    turn_number = 0
    for line in log:
        if "MAIN_READY" in line:
            turn_number += 1
        if "OPPOSING PLAY" in line and turn_number > 0:
            opponents_play = re.search('name=(.+?) id=', line).group(1)
            print "Opponent played: %s on turn %s" % (opponents_play, turn_number / 2 )
        if "FRIENDLY PLAY" in line and turn_number > 0:
            my_play = re.search('name=(.+?) id=', line).group(1)
            print "I played: %s on turn %s" % (opponents_play, turn_number / 2 )
        if "brbcoffee tag=PLAYSTATE value=WON" in line:
            did_i_win = 1
        if "brbcoffee tag=PLAYSTATE value=LOST" in line:
            did_i_win = 0
    return(did_i_win)    

print playAnalysis(log)



#determine win loss

#write to json

#not in this script -> send to db

#figure way to characterize deck archetypes based on cards
